/*!
 * gamepad.js v0.0.5-alpha 2015-11-15T01:48:54
 * https://github.com/neogeek/gamepad.js
 * 
 * Copyright (c) 2015 Scott Doxey
 * Released under the MIT license.
 */
!function(){"use strict";function a(a,b){var c=[];return Object.keys(b).forEach(function(d){b[d]===a?c.push(d):Array.isArray(b[d])&&-1!==b[d].indexOf(a)&&c.push(d)}),c}function b(){this._events={gamepad:[],axes:[],keyboard:{}},this._handlers={gamepad:{connect:null,disconnect:null}},this._keyMapping={gamepad:{button_1:0,button_2:1,button_3:2,button_4:3,shoulder_top_left:4,shoulder_top_right:5,shoulder_bottom_left:6,shoulder_bottom_right:7,select:8,start:9,stick_button_left:10,stick_button_right:11,d_pad_up:12,d_pad_down:13,d_pad_left:14,d_pad_right:15,vendor:16},axes:{stick_axis_left:[0,2],stick_axis_right:[2,4]},keyboard:{button_1:32,start:27,d_pad_up:[38,87],d_pad_down:[40,83],d_pad_left:[37,65],d_pad_right:[39,68]}},this._threshold=.3,this._listeners=[],this._handleKeyboardEventListener=this._handleKeyboardEventListener.bind(this),this.resume()}var c,d,e=void 0!==window.navigator.getGamepads;"undefined"!==String(typeof window)&&["webkit","moz"].forEach(function(a){c=c||window.requestAnimationFrame||window[a+"RequestAnimationFrame"]||null,d=d||window.cancelAnimationFrame||window[a+"CancelAnimationFrame"]||null}),b.prototype._handleGamepadConnected=function(a){this._handlers.gamepad.connect&&this._handlers.gamepad.connect({index:a})},b.prototype._handleGamepadDisconnected=function(a){this._handlers.gamepad.disconnect&&this._handlers.gamepad.disconnect({index:a})},b.prototype._handleGamepadEventListener=function(b){var c=this;b&&b.connected&&b.buttons.forEach(function(d,e){var f=a(e,c._keyMapping.gamepad);f&&f.forEach(function(a){d.pressed?(c._events.gamepad[b.index][a]||(c._events.gamepad[b.index][a]={pressed:!0,hold:!1,released:!1,player:b.index}),c._events.gamepad[b.index][a].value=d.value):!d.pressed&&c._events.gamepad[b.index][a]&&(c._events.gamepad[b.index][a].released=!0,c._events.gamepad[b.index][a].hold=!1)})})},b.prototype._handleGamepadAxisEventListener=function(a){var b=this;a&&a.connected&&Object.keys(b._keyMapping.axes).forEach(function(c){var d=Array.prototype.slice.apply(a.axes,b._keyMapping.axes[c]);Math.abs(d[0])>b._threshold||Math.abs(d[1])>b._threshold?b._events.axes[a.index][c]={pressed:b._events.axes[a.index][c]?!1:!0,hold:b._events.axes[a.index][c]?!0:!1,released:!1,value:d}:b._events.axes[a.index][c]&&(b._events.axes[a.index][c]={pressed:!1,hold:!1,released:!0,value:d})})},b.prototype._handleKeyboardEventListener=function(b){var c=this,d=a(b.keyCode,c._keyMapping.keyboard);d&&d.forEach(function(a){"keydown"!==b.type||c._events.keyboard[a]?"keyup"===b.type&&c._events.keyboard[a]&&(c._events.keyboard[a].released=!0,c._events.keyboard[a].hold=!1):c._events.keyboard[a]={pressed:!0,hold:!1,released:!1}})},b.prototype._handleEvent=function(a,b,c){b[a].pressed?(this.trigger("press",a,b[a].value,c),b[a].pressed=!1,b[a].hold=!0):b[a].hold?this.trigger("hold",a,b[a].value,c):b[a].released&&(this.trigger("release",a,b[a].value,c),delete b[a])},b.prototype._loop=function(){var a,b=this,d=e?window.navigator.getGamepads():!1,f=4;if(d){for(a=0;f>a;a+=1)d[a]?(b._events.gamepad[a]||(b._handleGamepadConnected(a),b._events.gamepad[a]={},b._events.axes[a]={}),b._handleGamepadEventListener(d[a]),b._handleGamepadAxisEventListener(d[a])):b._events.gamepad[a]&&(b._handleGamepadDisconnected(a),b._events.gamepad[a]=null,b._events.axes[a]=null);b._events.gamepad.forEach(function(a,c){a&&Object.keys(a).forEach(function(d){b._handleEvent(d,a,c)})}),b._events.axes.forEach(function(a,c){a&&Object.keys(a).forEach(function(d){b._handleEvent(d,a,c)})})}Object.keys(b._events.keyboard).forEach(function(a){b._handleEvent(a,b._events.keyboard,"keyboard")}),b._requestAnimation&&(b._requestAnimation=c(b._loop.bind(b)))},b.prototype.on=function(a,b,c,d){var e=this;-1!==Object.keys(this._handlers.gamepad).indexOf(a)&&"function"==typeof b?(this._handlers.gamepad[a]=b,this._events.gamepad=[]):("string"==typeof a&&a.match(/\s+/)&&(a=a.split(/\s+/g)),"string"==typeof b&&b.match(/\s+/)&&(b=b.split(/\s+/g)),Array.isArray(a)?a.forEach(function(a){e.on(a,b,c,d)}):Array.isArray(b)?b.forEach(function(b){e.on(a,b,c,d)}):this._listeners.push({type:a,button:b,callback:c,options:d}))},b.prototype.setCustomMapping=function(a,b){if(void 0===this._keyMapping[a])throw new Error('The device "'+a+'" is not supported through gamepad.js');this._keyMapping[a]=b},b.prototype.setGlobalThreshold=function(a){this._threshold=parseFloat(a)},b.prototype.trigger=function(a,b,c,d){this._listeners&&this._listeners.forEach(function(e){e.type===a&&e.button===b&&e.callback({type:e.type,button:e.button,value:c,player:d,event:e,timestamp:Date.now()})})},b.prototype.pause=function(){d(this._requestAnimation),this._requestAnimation=null,document.removeEventListener("keydown",this._handleKeyboardEventListener),document.removeEventListener("keyup",this._handleKeyboardEventListener)},b.prototype.resume=function(){this._requestAnimation=c(this._loop.bind(this)),document.addEventListener("keydown",this._handleKeyboardEventListener),document.addEventListener("keyup",this._handleKeyboardEventListener)},b.prototype.destroy=function(){this.pause(),delete this._listeners},"function"==typeof define&&void 0!==define.amd?define([],function(){return b}):"object"==typeof module&&void 0!==module.exports?module.exports=b:window.Gamepad=b}();